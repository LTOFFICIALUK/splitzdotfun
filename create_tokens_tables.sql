-- Create tokens table for tracking launched tokens
CREATE TABLE IF NOT EXISTS tokens (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    deployer_user_id UUID REFERENCES profiles(id) ON DELETE SET NULL,
    deployer_social_or_wallet TEXT NOT NULL, -- The social handle or wallet address used for deployment
    name TEXT NOT NULL,
    symbol TEXT NOT NULL,
    description TEXT,
    contract_address TEXT NOT NULL UNIQUE, -- CA (Contract Address)
    token_link TEXT NOT NULL, -- Link to the token page on our platform
    social_link TEXT, -- X/Twitter link
    image_url TEXT,
    banner_url TEXT,
    metadata_url TEXT NOT NULL, -- BagsApp metadata URL
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    fees_generated DECIMAL(20, 8) DEFAULT 0 -- Total fees generated (will be updated by backend API)
);

-- Create token_ownership table for tracking ownership and royalties
CREATE TABLE IF NOT EXISTS token_ownership (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    token_id UUID REFERENCES tokens(id) ON DELETE CASCADE NOT NULL,
    deployer_user_id UUID REFERENCES profiles(id) ON DELETE SET NULL,
    current_owner TEXT NOT NULL, -- Wallet address or social handle of current owner
    current_owner_user_id UUID REFERENCES profiles(id) ON DELETE SET NULL, -- Can be null if owner doesn't have account
    royalty_earners JSONB NOT NULL, -- Array of objects: {social_or_wallet, role, percentage}
    ownership_history JSONB, -- Array of previous ownership records, null if only one owner
    total_fees_earned DECIMAL(20, 8) DEFAULT 0,
    fees_owed_per_earner JSONB DEFAULT '{}', -- Object mapping earner to amount owed
    fees_claimed_per_earner JSONB DEFAULT '{}', -- Object mapping earner to amount claimed
    total_fees_claimed DECIMAL(20, 8) DEFAULT 0, -- Sum of all fees claimed by all earners
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_tokens_deployer_user_id ON tokens(deployer_user_id);
CREATE INDEX IF NOT EXISTS idx_tokens_contract_address ON tokens(contract_address);
CREATE INDEX IF NOT EXISTS idx_tokens_created_at ON tokens(created_at);
CREATE INDEX IF NOT EXISTS idx_token_ownership_token_id ON token_ownership(token_id);
CREATE INDEX IF NOT EXISTS idx_token_ownership_current_owner ON token_ownership(current_owner);
CREATE INDEX IF NOT EXISTS idx_token_ownership_deployer_user_id ON token_ownership(deployer_user_id);

-- Create updated_at trigger function if it doesn't exist
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers to automatically update updated_at
CREATE TRIGGER update_tokens_updated_at BEFORE UPDATE ON tokens
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_token_ownership_updated_at BEFORE UPDATE ON token_ownership
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Add comments for documentation
COMMENT ON TABLE tokens IS 'Stores information about tokens launched through the platform';
COMMENT ON COLUMN tokens.deployer_social_or_wallet IS 'The social handle (e.g., @username) or wallet address used for deployment';
COMMENT ON COLUMN tokens.contract_address IS 'The Solana contract address (CA) of the token';
COMMENT ON COLUMN tokens.token_link IS 'Link to the token page on our platform (e.g., https://splitz.fun/token/{CA})';
COMMENT ON COLUMN tokens.fees_generated IS 'Total fees generated by this token (updated by backend API)';

COMMENT ON TABLE token_ownership IS 'Tracks ownership and royalty information for tokens';
COMMENT ON COLUMN token_ownership.current_owner IS 'Wallet address or social handle of the current token owner';
COMMENT ON COLUMN token_ownership.royalty_earners IS 'JSON array of royalty earners: [{"social_or_wallet": "@user", "role": "Creator", "percentage": 50}, {"social_or_wallet": "wallet_address", "role": "Management", "percentage": 50}]';
COMMENT ON COLUMN token_ownership.ownership_history IS 'JSON array of previous ownership records: [{"owner": "wallet_address", "from": "2024-01-01", "to": "2024-01-15"}]';
COMMENT ON COLUMN token_ownership.fees_owed_per_earner IS 'JSON object mapping earners to amounts owed: {"@user": 0.5, "wallet_address": 0.3}';
COMMENT ON COLUMN token_ownership.fees_claimed_per_earner IS 'JSON object mapping earners to amounts claimed: {"@user": 0.2, "wallet_address": 0.1}';
COMMENT ON COLUMN token_ownership.total_fees_claimed IS 'Sum of all fees claimed by all earners for this token';
